input AdvertisementBuyerResponseType {
  accept: Boolean!
  touchId: String!
}

input AdvertisementPostInputType {
  book: BookCreationInput = null
  images: [String!]
  isbn: String!
  price: Float!
}

input AdvertisementSearchType {
  authorName: String
  bookName: String
  category: String
  maxPrice: Float
  minPrice: Float
  sellerName: String
}

input AdvertisementSellerResponseType {
  responsePrice: Float!
  touchId: String!
}

type AdvertisementType {
  _count: AdvertisementTypeCount
  book: Book!
  bookID: String!
  id: String!
  images: [String!]!
  open: Boolean!
  price: Int!
  seller: UserType!
  sellerID: String!
  time: String!
  touches(cursor: TouchTypeWhereUniqueInput, distinct: [TouchTypeScalarFieldEnum!], orderBy: [TouchTypeOrderByWithRelationInput!], skip: Int, take: Int, where: TouchTypeWhereInput): [TouchType!]!
}

type AdvertisementTypeCount {
  touches: Int!
}

input AdvertisementTypeListRelationFilter {
  every: AdvertisementTypeWhereInput
  none: AdvertisementTypeWhereInput
  some: AdvertisementTypeWhereInput
}

input AdvertisementTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdvertisementTypeOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookID: SortOrder
  id: SortOrder
  images: SortOrder
  open: SortOrder
  price: SortOrder
  seller: UserTypeOrderByWithRelationInput
  sellerID: SortOrder
  time: SortOrder
  touches: TouchTypeOrderByRelationAggregateInput
}

input AdvertisementTypeRelationFilter {
  is: AdvertisementTypeWhereInput
  isNot: AdvertisementTypeWhereInput
}

enum AdvertisementTypeScalarFieldEnum {
  bookID
  id
  images
  open
  price
  sellerID
  time
}

input AdvertisementTypeWhereInput {
  AND: [AdvertisementTypeWhereInput!]
  NOT: [AdvertisementTypeWhereInput!]
  OR: [AdvertisementTypeWhereInput!]
  book: BookRelationFilter
  bookID: StringFilter
  id: StringFilter
  images: StringNullableListFilter
  open: BoolFilter
  price: IntFilter
  seller: UserTypeRelationFilter
  sellerID: StringFilter
  time: StringFilter
  touches: TouchTypeListRelationFilter
}

input AdvertisementTypeWhereUniqueInput {
  id: String
}

input AdvertisementtouchInputType {
  advertisementId: String!
  price: Float!
}

type Book {
  _count: BookCount
  advertisements(cursor: AdvertisementTypeWhereUniqueInput, distinct: [AdvertisementTypeScalarFieldEnum!], orderBy: [AdvertisementTypeOrderByWithRelationInput!], skip: Int, take: Int, where: AdvertisementTypeWhereInput): [AdvertisementType!]!
  authorName: String!
  bookName: String!
  category: Category!
  categoryID: String!
  description: String!
  id: String!
  isbn: String!
  purchases: Int!
}

type BookCount {
  advertisements: Int!
}

input BookCreationInput {
  authorName: String!
  bookName: String!
  category: String!
  description: String!
  isbn: String!
}

input BookListRelationFilter {
  every: BookWhereInput
  none: BookWhereInput
  some: BookWhereInput
}

input BookOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookOrderByWithRelationInput {
  advertisements: AdvertisementTypeOrderByRelationAggregateInput
  authorName: SortOrder
  bookName: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryID: SortOrder
  description: SortOrder
  id: SortOrder
  isbn: SortOrder
  purchases: SortOrder
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

enum BookScalarFieldEnum {
  authorName
  bookName
  categoryID
  description
  id
  isbn
  purchases
}

input BookWhereInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  advertisements: AdvertisementTypeListRelationFilter
  authorName: StringFilter
  bookName: StringFilter
  category: CategoryRelationFilter
  categoryID: StringFilter
  description: StringFilter
  id: StringFilter
  isbn: StringFilter
  purchases: IntFilter
}

input BookWhereUniqueInput {
  id: String
  isbn: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  _count: CategoryCount
  books(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): [Book!]!
  description: String
  id: String!
  image: String!
  name: String!
}

type CategoryCount {
  books: Int!
}

input CategoryCreationInput {
  description: String
  image: String! = ""
  name: String!
}

input CategoryOrderByWithRelationInput {
  books: BookOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  books: BookListRelationFilter
  description: StringNullableFilter
  id: StringFilter
  image: StringFilter
  name: StringFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createCategory(createCategoryInput: CategoryCreationInput!): Category!
  deleteUser: Boolean!
  loginUser(loginDetails: UserLoginType!): UserType
  logoutUser: Boolean!
  postAdvertisement(postAdvertisement: AdvertisementPostInputType!): AdvertisementType!
  registerUser(registerDetails: UserRegisterType!): Boolean!
  respondBuyerTouch(responseInput: AdvertisementBuyerResponseType!): Boolean!
  respondSellerTouch(responseInput: AdvertisementSellerResponseType!): Boolean!
  touchAdvertisement(touchAdvertisement: AdvertisementtouchInputType!): Boolean!
  updateUser(input: UserUpdateType!): UserType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  getAdvertisement(advertisement: String!): AdvertisementType!
  getAllActiveAdvertisements: [AdvertisementType!]!
  getAllAdvertisements: [AdvertisementType!]!
  getAllCategories: [Category!]!
  getAllUsers: [UserType!]!
  getCurrentUser: UserType!
  getTrendingBooks: [Book!]!
  searchAdvertisements(searchInput: AdvertisementSearchType!): [AdvertisementType!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type TouchType {
  advertisement: AdvertisementType!
  advertisementId: String!
  buyer: UserType!
  buyerId: String!
  id: String!
  isActive: Boolean!
  isFinal: Boolean!
  price: Int!
  responded: Boolean!
  responded_price: Int!
}

input TouchTypeListRelationFilter {
  every: TouchTypeWhereInput
  none: TouchTypeWhereInput
  some: TouchTypeWhereInput
}

input TouchTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input TouchTypeOrderByWithRelationInput {
  advertisement: AdvertisementTypeOrderByWithRelationInput
  advertisementId: SortOrder
  buyer: UserTypeOrderByWithRelationInput
  buyerId: SortOrder
  id: SortOrder
  isActive: SortOrder
  isFinal: SortOrder
  price: SortOrder
  responded: SortOrder
  responded_price: SortOrder
}

enum TouchTypeScalarFieldEnum {
  advertisementId
  buyerId
  id
  isActive
  isFinal
  price
  responded
  responded_price
}

input TouchTypeWhereInput {
  AND: [TouchTypeWhereInput!]
  NOT: [TouchTypeWhereInput!]
  OR: [TouchTypeWhereInput!]
  advertisement: AdvertisementTypeRelationFilter
  advertisementId: StringFilter
  buyer: UserTypeRelationFilter
  buyerId: StringFilter
  id: StringFilter
  isActive: BoolFilter
  isFinal: BoolFilter
  price: IntFilter
  responded: BoolFilter
  responded_price: IntFilter
}

input TouchTypeWhereUniqueInput {
  id: String
}

input UserLoginType {
  password: String!
  username: String!
}

input UserRegisterType {
  email: String!
  password: String!
  username: String!
}

type UserType {
  _count: UserTypeCount
  address: String
  ads(cursor: AdvertisementTypeWhereUniqueInput, distinct: [AdvertisementTypeScalarFieldEnum!], orderBy: [AdvertisementTypeOrderByWithRelationInput!], skip: Int, take: Int, where: AdvertisementTypeWhereInput): [AdvertisementType!]!
  email: String!
  fullName: String
  id: String!
  password: String!
  phoneNo: String
  touches(cursor: TouchTypeWhereUniqueInput, distinct: [TouchTypeScalarFieldEnum!], orderBy: [TouchTypeOrderByWithRelationInput!], skip: Int, take: Int, where: TouchTypeWhereInput): [TouchType!]!
  username: String!
}

type UserTypeCount {
  ads: Int!
  touches: Int!
}

input UserTypeOrderByWithRelationInput {
  address: SortOrder
  ads: AdvertisementTypeOrderByRelationAggregateInput
  email: SortOrder
  fullName: SortOrder
  id: SortOrder
  password: SortOrder
  phoneNo: SortOrder
  touches: TouchTypeOrderByRelationAggregateInput
  username: SortOrder
}

input UserTypeRelationFilter {
  is: UserTypeWhereInput
  isNot: UserTypeWhereInput
}

input UserTypeWhereInput {
  AND: [UserTypeWhereInput!]
  NOT: [UserTypeWhereInput!]
  OR: [UserTypeWhereInput!]
  address: StringNullableFilter
  ads: AdvertisementTypeListRelationFilter
  email: StringFilter
  fullName: StringNullableFilter
  id: StringFilter
  password: StringFilter
  phoneNo: StringNullableFilter
  touches: TouchTypeListRelationFilter
  username: StringFilter
}

input UserUpdateType {
  address: String!
  email: String!
  fullName: String!
  phoneNo: String!
}